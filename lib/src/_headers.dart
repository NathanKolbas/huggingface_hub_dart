import 'package:huggingface_hub/src/constants.dart' as constants;

import '_auth.dart';
import '_runtime.dart';
import 'errors.dart';

/// Build headers dictionary to send in a HF Hub call.
///
/// By default, authorization token is always provided either from argument (explicit
/// use) or retrieved from the cache (implicit use). To explicitly avoid sending the
/// token to the Hub, set `token=False` or set the `HF_HUB_DISABLE_IMPLICIT_TOKEN`
/// environment variable.
///
/// In case of an API call that requires write access, an error is thrown if token is
/// `None` or token is an organization token (starting with `"api_org***"`).
///
/// In addition to the auth header, a user-agent is added to provide information about
/// the installed packages (versions of python, huggingface_hub, torch, tensorflow,
/// fastai and fastcore).
///
/// Args:
///     token (`str`, `bool`, *optional*):
///         The token to be sent in authorization header for the Hub call:
///             - if a string, it is used as the Hugging Face token
///             - if `True`, the token is read from the machine (cache or env variable)
///             - if `False`, authorization header is not set
///             - if `None`, the token is read from the machine only except if
///               `HF_HUB_DISABLE_IMPLICIT_TOKEN` env variable is set.
///     library_name (`str`, *optional*):
///         The name of the library that is making the HTTP request. Will be added to
///         the user-agent header.
///     library_version (`str`, *optional*):
///         The version of the library that is making the HTTP request. Will be added
///         to the user-agent header.
///     user_agent (`str`, `dict`, *optional*):
///         The user agent info in the form of a dictionary or a single string. It will
///         be completed with information about the installed packages.
///     headers (`dict`, *optional*):
///         Additional headers to include in the request. Those headers take precedence
///         over the ones generated by this function.
///     is_write_action (`bool`):
///         Ignored and deprecated argument.
///
/// Returns:
///     A `Dict` of headers to pass in your API call.
///
/// Example:
/// ```py
///     >>> build_hf_headers(token="hf_***") # explicit token
///     {"authorization": "Bearer hf_***", "user-agent": ""}
///
///     >>> build_hf_headers(token=True) # explicitly use cached token
///     {"authorization": "Bearer hf_***",...}
///
///     >>> build_hf_headers(token=False) # explicitly don't use cached token
///     {"user-agent": ...}
///
///     >>> build_hf_headers() # implicit use of the cached token
///     {"authorization": "Bearer hf_***",...}
///
///     # HF_HUB_DISABLE_IMPLICIT_TOKEN=True # to set as env variable
///     >>> build_hf_headers() # token is not sent
///     {"user-agent": ...}
///
///     >>> build_hf_headers(library_name="transformers", library_version="1.2.3")
///     {"authorization": ..., "user-agent": "transformers/1.2.3; hf_hub/0.10.2; python/3.10.4; tensorflow/1.55"}
/// ```
///
/// Raises:
///     [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
///         If organization token is passed and "write" access is required.
///     [`ValueError`](https://docs.python.org/3/library/exceptions.html#ValueError)
///         If "write" access is required but token is not passed and not saved locally.
///     [`EnvironmentError`](https://docs.python.org/3/library/exceptions.html#EnvironmentError)
///         If `token=True` but token is not saved locally.
Future<Map<String, String>> buildHfHeaders({
  dynamic token,
  String? libraryName,
  String? libraryVersion,
  dynamic userAgent,
  Map<String, String>? headers,
}) async {
  // Get auth token to send
  final String? tokenToSend = await getTokenToSend(token);

  // Combine headers
  final hfHeaders = {
    'user-agent': _httpUserAgent(
      libraryName: libraryName,
      libraryVersion: libraryVersion,
      userAgent: userAgent,
    )
  };
  if (tokenToSend != null) {
    hfHeaders['authorization'] = 'Bearer $tokenToSend';
  }
  if (headers != null) {
    hfHeaders.addAll(headers);
  }
  return hfHeaders;
}

/// Select the token to send from either `token` or the cache.
Future<String?> getTokenToSend(dynamic token) async {
  // Case token is explicitly provided
  if (token is String) {
    return token;
  }

  // Case token is explicitly provided
  if (token == false) {
    return null;
  }

  // Token is not provided: we get it from local cache
  final cachedToken = await getToken();

  if (token == true) {
    if (cachedToken == null) {
      throw LocalTokenNotFoundError(
          'Token is required (`token=True`), but no token found. You'
          ' need to provide a token or be logged in to Hugging Face with'
          ' `huggingface-cli login` or `huggingface_hub.login`. See'
          ' https://huggingface.co/settings/tokens.'
      );
    }

    return cachedToken;
  }

  // Case implicit use of the token is forbidden by env variable
  if (constants.HF_HUB_DISABLE_IMPLICIT_TOKEN) {
    return null;
  }

  // Otherwise: we use the cached token as the user has not explicitly forbidden it
  return cachedToken;
}

/// Format a user-agent string containing information about the installed packages.
///
/// Args:
///     library_name (`str`, *optional*):
///         The name of the library that is making the HTTP request.
///     library_version (`str`, *optional*):
///         The version of the library that is making the HTTP request.
///     user_agent (`str`, `dict`, *optional*):
///         The user agent info in the form of a dictionary or a single string.
///
/// Returns:
///     The formatted user-agent string.
String _httpUserAgent({
  String? libraryName,
  String? libraryVersion,
  dynamic userAgent,
}) {
  String ua = libraryName != null ? '$libraryName/$libraryVersion' : 'unknown/None';
  ua += '; hf_hub/${getHfHubVersion()}';
  ua += '; dart/${getDartVersion()}';

  if (userAgent is Map) {
    ua += '; ${[for (final e in userAgent.entries) '${e.key}/${e.value}'].join('; ')}';
  } else if (userAgent is String) {
    ua += "; $userAgent";
  }

  // Retrieve user-agent origin headers from environment variable
  final origin = constants.HF_HUB_USER_AGENT_ORIGIN;
  if (origin != null) {
    ua += "; origin/$origin";
  }

  return _deduplicateUserAgent(ua);
}

/// Deduplicate redundant information in the generated user-agent.
String _deduplicateUserAgent(String userAgent) {
  // Split around ";" > Strip whitespaces > Store as dict keys (ensure unicity) > format back as string
  // preserving order
  return userAgent.split(';').map((e) => e.trim()).toSet().join('; ');
}
